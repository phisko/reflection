function(putils_build_clang_arguments out_var target)
    # Build clang arguments
    set(clang_args)
    get_target_property(cxx_version ${target} CXX_STANDARD)
    list(APPEND clang_args -std=c++${cxx_version})
    list(APPEND clang_args ${ARGN})

    # All include directories for the target, prefixed with '-I' and separated by a space
    set(include_directories $<TARGET_PROPERTY:${target},INCLUDE_DIRECTORIES>)
    set(include_directories $<REMOVE_DUPLICATES:${include_directories}>)
    list(APPEND clang_args "-I$<JOIN:${include_directories}, -I>")

    # All compile definitions for the target, prefixed with '-D' and separated by a space
    set(compile_definitions $<TARGET_PROPERTY:${target},COMPILE_DEFINITIONS>)
    set(compile_definitions $<REMOVE_DUPLICATES:${compile_definitions}>)
    list(APPEND clang_args "-D$<JOIN:${compile_definitions}, -D>")

    # Get the export headers generated by putils_export_symbols.cmake
    set(processed)
    function(get_export_headers out_var_name current_target)
        if (NOT TARGET ${current_target})
            return()
        endif()

        set(out_list)

        get_target_property(export_file_name ${current_target} PUTILS_EXPORT_FILE_NAME)
        if(NOT "${export_file_name}" STREQUAL export_file_name-NOTFOUND)
            list(APPEND out_list ${export_file_name})
        endif()

        get_target_property(dependencies ${current_target} LINK_LIBRARIES)
        if("${dependencies}" STREQUAL dependencies-NOTFOUND)
            set(dependencies)
        endif()

        get_target_property(interface_dependencies ${current_target} INTERFACE_LINK_LIBRARIES)
        if(NOT "${interface_dependencies}" STREQUAL interface_dependencies-NOTFOUND)
            list(APPEND dependencies ${interface_dependencies})
        endif()

        list(REMOVE_DUPLICATES dependencies)

        foreach(dependency ${dependencies})
            if (${dependency} IN_LIST processed)
                continue()
            endif()
            list(APPEND processed ${dependency})
            set(processed ${processed} PARENT_SCOPE)

            get_export_headers(dependency_export_headers ${dependency})
            list(APPEND out_list ${dependency_export_headers})
        endforeach()

        list(REMOVE_DUPLICATES out_list)
        set(${out_var_name} ${out_list} PARENT_SCOPE)
    endfunction()

    # Force include export headers
    get_export_headers(export_headers ${target})
    foreach(header ${export_headers})
        list(APPEND clang_args -include ${header})
    endforeach()

	set(${out_var} ${clang_args} PARENT_SCOPE)
endfunction()